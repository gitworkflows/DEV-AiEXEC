# Frontend-specific Makefile for Aiexec
# This file contains all frontend-related targets

# Variables
FRONTEND_DIR = web
NPM = npm
JEST = npx jest

# Allow verbose output for npm commands
ifeq ($(VERBOSE),true)
NPM_INSTALL = npm install
NPM_CI = npm ci
else
NPM_INSTALL = npm install > /dev/null 2>&1
NPM_CI = npm ci > /dev/null 2>&1
endif

.PHONY: all_frontend_targets install_frontend install_frontendci install_frontendc frontend_deps_check build_frontend run_frontend frontend frontendc format_frontend tests_frontend test_frontend test_frontend_watch test_frontend_coverage test_frontend_verbose test_frontend_ci test_frontend_clean test_frontend_file test_frontend_pattern test_frontend_snapshots test_frontend_config test_frontend_bail test_frontend_silent test_frontend_coverage_open help_frontend

all_frontend_targets: help_frontend ## show all frontend targets

######################
# FRONTEND DEPENDENCIES
######################

install_frontend: ## install the frontend dependencies
	@echo 'Installing frontend dependencies'
	@cd $(FRONTEND_DIR) && $(NPM_INSTALL)

install_frontendci: ## install frontend dependencies using npm ci
	@echo 'Installing frontend dependencies with npm ci'
	@cd $(FRONTEND_DIR) && $(NPM_CI)

install_frontendc: ## clean and install frontend dependencies
	@echo 'Clean installing frontend dependencies'
	@cd $(FRONTEND_DIR) && $(call CLEAR_DIRS,node_modules) && rm -f package-lock.json && $(NPM_INSTALL)

# Check if frontend dependencies are installed
frontend_deps_check:
	@if [ ! -d "$(FRONTEND_DIR)/node_modules" ]; then \
		echo "Frontend dependencies not found. Running 'make install_frontend'..."; \
		$(MAKE) install_frontend; \
	fi

######################
# FRONTEND BUILD
######################

build_frontend: frontend_deps_check ## build the frontend static files
	@echo '==== Starting frontend build ===='
	@cd $(FRONTEND_DIR) && CI='' npm run build 2>&1 || { echo "\nBuild failed! Error output above ☝️"; exit 1; }
	@echo 'Clearing destination directory...'
	$(call CLEAR_DIRS,api/base/aiexec/frontend)
	@echo 'Copying build files...'
	@cp -r $(FRONTEND_DIR)/build/. api/base/aiexec/frontend
	@echo '==== Frontend build complete ===='

######################
# FRONTEND DEVELOPMENT
######################

run_frontend: frontend_deps_check ## run the frontend development server
	@-kill -9 $$(lsof -t -i:3000) || true
	@cd $(FRONTEND_DIR) && npm start $(if $(FRONTEND_START_FLAGS),-- $(FRONTEND_START_FLAGS))

frontend: install_frontend ## install dependencies and run frontend in dev mode
	@make run_frontend

frontendc: install_frontendc ## clean install dependencies and run frontend
	@make run_frontend

######################
# FRONTEND CODE QUALITY
######################

format_frontend: frontend_deps_check ## format frontend code
	@cd $(FRONTEND_DIR) && npm run format

######################
# FRONTEND E2E TESTS (PLAYWRIGHT)
######################

tests_frontend: frontend_deps_check ## run frontend Playwright e2e tests
ifeq ($(UI), true)
	@cd $(FRONTEND_DIR) && npx playwright test --ui --project=chromium
else
	@cd $(FRONTEND_DIR) && npx playwright test --project=chromium
endif

######################
# FRONTEND UNIT TESTS (JEST)
######################

# Base target for running Jest tests
run_jest = @cd $(FRONTEND_DIR) && $(JEST) $(1)

test_frontend: frontend_deps_check ## run all frontend Jest unit tests
	@echo "Running all frontend Jest unit tests..."
	$(call run_jest)

test_frontend_watch: frontend_deps_check ## run frontend tests in watch mode
	@echo "Running frontend tests in watch mode..."
	$(call run_jest,--watch)

test_frontend_coverage: frontend_deps_check ## run frontend tests with coverage report
	@echo "Running frontend tests with coverage report..."
	$(call run_jest,--coverage)

test_frontend_verbose: frontend_deps_check ## run frontend tests with verbose output
	@echo "Running frontend tests with verbose output..."
	$(call run_jest,--verbose)

test_frontend_ci: frontend_deps_check ## run frontend tests in CI mode
	@echo "Running frontend tests in CI mode..."
	@cd $(FRONTEND_DIR) && CI=true $(JEST) --ci --coverage --watchAll=false

test_frontend_clean: frontend_deps_check ## clean test cache and run tests
	@echo "Cleaning Jest cache and running tests..."
	$(call run_jest,--clearCache)
	$(call run_jest)

test_frontend_file: frontend_deps_check ## run tests for a specific file (e.g., make test_frontend_file FILE=path/to/test.ts)
	@if [ -z "$(FILE)" ]; then \
		echo "Usage: make test_frontend_file FILE=path/to/test.ts"; \
		exit 1; \
	fi
	@echo "Running tests for file: $(FILE)"
	$(call run_jest,$(FILE))

test_frontend_pattern: frontend_deps_check ## run tests matching a pattern (e.g., make test_frontend_pattern PATTERN=pattern)
	@if [ -z "$(PATTERN)" ]; then \
		echo "Usage: make test_frontend_pattern PATTERN=pattern"; \
		exit 1; \
	fi
	@echo "Running tests matching pattern: $(PATTERN)"
	$(call run_jest,--testNamePattern="$(PATTERN)")

test_frontend_snapshots: frontend_deps_check ## update Jest snapshots
	@echo "Updating Jest snapshots..."
	$(call run_jest,--updateSnapshot)

test_frontend_config: ## show Jest configuration
	@echo "Jest configuration:"
	$(call run_jest,--showConfig)

test_frontend_bail: frontend_deps_check ## run tests with bail (stop on first failure)
	@echo "Running Jest tests with bail (stop on first failure)..."
	$(call run_jest,--bail)

test_frontend_silent: frontend_deps_check ## run tests silently (minimal output)
	@echo "Running Jest tests silently..."
	$(call run_jest,--silent)

test_frontend_coverage_open: test_frontend_coverage ## run tests with coverage and open report in browser
	@echo "Opening coverage report in browser..."
	@if command -v open >/dev/null 2>&1; then \
		open $(FRONTEND_DIR)/coverage/lcov-report/index.html; \
	elif command -v xdg-open >/dev/null 2>&1; then \
		xdg-open $(FRONTEND_DIR)/coverage/lcov-report/index.html; \
	else \
		echo "Coverage report generated at: $(FRONTEND_DIR)/coverage/lcov-report/index.html"; \
	fi

######################
# FRONTEND HELP
######################

help_frontend: ## show this help message
	@echo '----'
	@awk 'BEGIN {FS = ":.*?## "; /^[a-zA-Z0-9_-]+:.*?## / {printf "\033[36m%%-25s\033[0m %%s\n", $$1, $$2}}' $(MAKEFILE_LIST) | grep -v 'all_frontend_targets'
	@echo '----'
